[{"/home/anderson/blog/client/src/index.js":"1","/home/anderson/blog/client/src/App.js":"2","/home/anderson/blog/client/src/reportWebVitals.js":"3","/home/anderson/blog/client/src/components/Home.js":"4","/home/anderson/blog/client/src/components/auth/Registro.js":"5","/home/anderson/blog/client/src/components/auth/Login.js":"6","/home/anderson/blog/client/src/components/Navbar.js":"7","/home/anderson/blog/client/src/components/auth/BgImage.js":"8","/home/anderson/blog/client/src/store/index.js":"9","/home/anderson/blog/client/src/store/reducers/AuthReducer.js":"10","/home/anderson/blog/client/src/store/asyncMethods/AuthMethods.js":"11","/home/anderson/blog/client/src/components/Dashboard.js":"12","/home/anderson/blog/client/src/store/tipos/userTypes.js":"13","/home/anderson/blog/client/src/privado/PrivateRoute.js":"14","/home/anderson/blog/client/src/privado/RouteLinks.js":"15","/home/anderson/blog/client/src/components/NotFound.js":"16","/home/anderson/blog/client/src/components/Create.js":"17","/home/anderson/blog/client/src/store/asyncMethods/PostMethods.js":"18","/home/anderson/blog/client/src/store/tipos/PostTypes.js":"19","/home/anderson/blog/client/src/store/reducers/PostReducer.js":"20","/home/anderson/blog/client/src/components/SideBar.js":"21","/home/anderson/blog/client/src/components/Pagination.js":"22","/home/anderson/blog/client/src/components/Edit.js":"23","/home/anderson/blog/client/src/components/Loader.js":"24","/home/anderson/blog/client/src/components/EditImge.js":"25","/home/anderson/blog/client/src/components/UpdateName.js":"26","/home/anderson/blog/client/src/store/reducers/ProfileReducer.js":"27","/home/anderson/blog/client/src/store/asyncMethods/ProfileMethods.js":"28","/home/anderson/blog/client/src/store/tipos/ProfileTipos.js":"29"},{"size":268,"mtime":1612189570210,"results":"30","hashOfConfig":"31"},{"size":1426,"mtime":1619014632840,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":1612187771852,"results":"33","hashOfConfig":"31"},{"size":285,"mtime":1612479975633,"results":"34","hashOfConfig":"31"},{"size":3090,"mtime":1619315147766,"results":"35","hashOfConfig":"31"},{"size":2806,"mtime":1612915702229,"results":"36","hashOfConfig":"31"},{"size":1531,"mtime":1618405217176,"results":"37","hashOfConfig":"31"},{"size":105,"mtime":1612402314038,"results":"38","hashOfConfig":"31"},{"size":679,"mtime":1618880811133,"results":"39","hashOfConfig":"31"},{"size":1478,"mtime":1618510170456,"results":"40","hashOfConfig":"31"},{"size":1488,"mtime":1618422820336,"results":"41","hashOfConfig":"31"},{"size":3946,"mtime":1619394858857,"results":"42","hashOfConfig":"31"},{"size":248,"mtime":1612914040333,"results":"43","hashOfConfig":"31"},{"size":370,"mtime":1612880169104,"results":"44","hashOfConfig":"31"},{"size":379,"mtime":1612880285461,"results":"45","hashOfConfig":"31"},{"size":536,"mtime":1612882248016,"results":"46","hashOfConfig":"31"},{"size":8324,"mtime":1619315021759,"results":"47","hashOfConfig":"31"},{"size":3357,"mtime":1619099483289,"results":"48","hashOfConfig":"31"},{"size":843,"mtime":1618752141598,"results":"49","hashOfConfig":"31"},{"size":2569,"mtime":1619100844930,"results":"50","hashOfConfig":"31"},{"size":505,"mtime":1619313740527,"results":"51","hashOfConfig":"31"},{"size":1143,"mtime":1618841050069,"results":"52","hashOfConfig":"31"},{"size":5540,"mtime":1618602588446,"results":"53","hashOfConfig":"31"},{"size":197,"mtime":1618598709056,"results":"54","hashOfConfig":"31"},{"size":3927,"mtime":1618756105157,"results":"55","hashOfConfig":"31"},{"size":3060,"mtime":1619395131232,"results":"56","hashOfConfig":"31"},{"size":434,"mtime":1619181479212,"results":"57","hashOfConfig":"31"},{"size":1040,"mtime":1619394115512,"results":"58","hashOfConfig":"31"},{"size":115,"mtime":1619017906454,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1m3xjqq",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/home/anderson/blog/client/src/index.js",[],["124","125"],"/home/anderson/blog/client/src/App.js",[],"/home/anderson/blog/client/src/reportWebVitals.js",[],"/home/anderson/blog/client/src/components/Home.js",[],"/home/anderson/blog/client/src/components/auth/Registro.js",[],"/home/anderson/blog/client/src/components/auth/Login.js",[],"/home/anderson/blog/client/src/components/Navbar.js",[],"/home/anderson/blog/client/src/components/auth/BgImage.js",[],"/home/anderson/blog/client/src/store/index.js",[],"/home/anderson/blog/client/src/store/reducers/AuthReducer.js",[],"/home/anderson/blog/client/src/store/asyncMethods/AuthMethods.js",[],"/home/anderson/blog/client/src/components/Dashboard.js",["126","127"],"/home/anderson/blog/client/src/store/tipos/userTypes.js",[],"/home/anderson/blog/client/src/privado/PrivateRoute.js",[],"/home/anderson/blog/client/src/privado/RouteLinks.js",[],"/home/anderson/blog/client/src/components/NotFound.js",[],"/home/anderson/blog/client/src/components/Create.js",["128","129"],"/home/anderson/blog/client/src/store/asyncMethods/PostMethods.js",["130","131","132"],"import axios from 'axios';\nimport { CREATE_ERRORS, REMOVE_ERRORS, SET_LOADER, CLOSE_LOADER, REDIRECT_TRUE, REDIRECT_FALSE, SET_MESSAGE, REMOVE_MENSSAGE, SET_POSTS, SET_POST, POST_REQUEST, EDIT_ERRORS, SET_UPDATE_ERRORS,UPDATE_IMAGE_ERROR } from '../tipos/PostTypes';\n\nexport const createAction = (postData) => {\n\treturn async (dispatch, getState) => {\n\t\tconst {\n\t\t\tAuthReducer: { token },\n\t\t} = getState();\n\t\tdispatch({ type: SET_LOADER });\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst {\n\t\t\t\tdata: { msg },\n\t\t\t} = await axios.post('/create_post', postData, config);\n\t\t\tdispatch({ type: CLOSE_LOADER });\n\t\t\tdispatch({ type: REMOVE_ERRORS });\n\t\t\tdispatch({ type: REDIRECT_TRUE });\n\t\t\tdispatch({ type: SET_MESSAGE, payload: msg });\n\t\t} catch (error) {\n\t\t\tconsole.log(error.response);\n\t\t\tconst { errors } = error.response.data;\n\t\t\tdispatch({ type: CLOSE_LOADER });\n\t\t\tdispatch({ type: CREATE_ERRORS, payload: errors });\n\t\t}\n\t};\n};\n\nexport const fetchPosts = (id, page) => {\n\treturn async (dispatch, getState) => {\n\t\tconst {AuthReducer:{token}} = getState();\n\t\tdispatch({type: SET_LOADER})\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst {\n\t\t\t\tdata: {response, count, perPage},\n\t\t\t} = await axios.get(`/posts/${id}/${page}`, config)\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tdispatch({type: SET_POSTS, payload: {response, count, perPage}})\n\t\t} catch (error) {\n\t\t\tdispatch({type: CLOSE_LOADER});\n\t\t}\n\t}\n}\nexport const fetchPost = (id) => {\n\treturn async (dispatch, getState) => {\n\t\tconst {\n\t\t\tAuthReducer: { token },\n\t\t} = getState();\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t};\n\t\tdispatch({type: SET_LOADER})\n\t\ttry {\n\t\t\tconst {\n\t\t\t\tdata: {post},\n\t\t} = await axios.get(`/post/${id}`, config)\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tdispatch({type: SET_POST, payload: post})\n\t\t\tdispatch({type: POST_REQUEST});\n\t\t} catch (error) {\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tconsole.log(error.message)\n\n\t\t}\n\t}\n};\nexport const updateAction = (editData) => {\n\treturn async(dispatch, getState) => {\n\t\tconst {\n\t\t\tAuthReducer: { token },\n\t\t} = getState();\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t};\n\t\tdispatch({type: SET_LOADER})\n\t\ttry {\n\t\t\tconst {data} = await axios.post('/update', editData, config)\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tdispatch({type: REDIRECT_TRUE})\n\t\t\tdispatch({type: SET_MESSAGE, payload: data.msg})\n\t\t} catch (error) {\n\t\t\tconst {response: {\n\t\t\t\tdata: {errors},\n\t\t\t},\n\t\t}= error;\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tdispatch({type: SET_UPDATE_ERRORS, payload: errors})\n\t\t\tconsole.log(error.response)\n\t\t}\n\t}\n}\nexport const updateImageAction = (updateData) => {\n\treturn async(dispatch, getState) =>{\n\t\tconst {\n\t\t\tAuthReducer: { token },\n\t\t} = getState();\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t};\n\t\tdispatch({type: SET_LOADER})\n\t\ttry {\n\t\t\tconst {data: {msg},\n\t\t} = await axios.post('/updateImage', updateData, config)\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tdispatch({type: REDIRECT_TRUE})\n\t\t\tdispatch({type: SET_MESSAGE, payload: msg})\n\t\t} catch (error) {\n\t\t\tconst {response: {data:{errors}}} = error\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tdispatch({type: UPDATE_IMAGE_ERROR, payload: errors})\n\t\t\tconsole.log(error.response)\n\n\t\t}\n\t}\t\n}","/home/anderson/blog/client/src/store/tipos/PostTypes.js",[],"/home/anderson/blog/client/src/store/reducers/PostReducer.js",["133"],"import {SET_LOADER, CLOSE_LOADER, CREATE_ERRORS, REDIRECT_TRUE, REDIRECT_FALSE, SET_MESSAGE, REMOVE_MESSAGE, REMOVE_ERRORS, SET_POSTS, SET_POST, POST_REQUEST, POST_RESET, RESET_UPDATE, SET_UPDATE_ERRORS, RESET_UPDATE_ERRORS, UPDATE_IMAGE_ERROR, RESET_UPDATE_IMAGE_ERRORS} from '../tipos/PostTypes';\nconst initState = {\n    loading: false,\n    createErrors: [],\n    redirect: false,\n    message: '',\n    posts: [],\n    perPage: 0,\n    count: 0,\n    post:{},\n    postStatus: false,\n    editErrors: [],\n    updateImageErrors: [],\n}\n\nexport const PostReducer = (state = initState, action) => {\n    const {type, payload} = action;\n    if(type === SET_LOADER){\n        return {...state, loading: true}\n    }else if(type === CLOSE_LOADER){\n        return {...state, loading: false}\n    }else if(type === CREATE_ERRORS){\n        return {...state, createErrors: payload }\n    }else if(type ===REDIRECT_TRUE) {\n        return {...state, redirect: true}\n    }else if(type === REDIRECT_FALSE){\n        return{...state, redirect: false}    \n    }else if(type === SET_MESSAGE){\n        return{ ...state, message: action.payload}\n    }else if(type === REMOVE_MESSAGE){\n        return{...state , message: ''}\n    }else if(type === REMOVE_ERRORS){\n        return{ ...state, createErrors: [] };\n    }else{\n    return state;\n}\n};\n\nexport const FetchPosts = (state = initState, action) => {\n    const {type, payload} = action;\n    if(type === SET_POSTS){\n        return{...state, posts: payload.response, count: payload.count, perPage: payload.perPage};\n    }else{\n        return state\n    }\n}\nexport const FetchPost = (state = initState, action) => {\n    const {type, payload} = action;\n    if(type === SET_POST){\n        return {...state, post: payload };\n    }else if(type === POST_REQUEST) {\n        return {...state, postStatus: true }\n    }else if(type === POST_RESET){\n        return{...state, postStatus: false}\n    }else{\n        return state;\n    }\n};\nexport const UpdatePost = (state = initState, action) => {\n    const {type, payload} = action;\n    if(type === SET_UPDATE_ERRORS){\n        return{...state, editErrors: payload}\n    }else if(type === RESET_UPDATE_ERRORS){\n        return{...state, editErrors: []}\n    }else{\n        return state;\n    }\n}\nexport const updateImage = (state = initState, action) => {\n    const {payload, type} = action\n    if(type === UPDATE_IMAGE_ERROR){\n        return {...state, updateImageErrors: payload,}\n    }else if(type === RESET_UPDATE_IMAGE_ERRORS){\n        return{...state, updateImageErrors: []}\n    }else{\n        return state\n    }\n}","/home/anderson/blog/client/src/components/SideBar.js",[],"/home/anderson/blog/client/src/components/Pagination.js",["134"],"import { Link } from 'react-router-dom';\nimport { BsChevronRight, BsChevronLeft } from 'react-icons/bs';\nconst Pagination = ({ count, page, perPage }) => {\n\tlet totalPages = Math.ceil(count / perPage);\n\tlet startLoop = page;\n\tlet diff = totalPages - page;\n\tif (diff <= 3) {\n\t\tstartLoop = totalPages - 3;\n\t}\n\tlet endLoop = startLoop + 3;\n\tif (startLoop <= 0) {\n\t\tstartLoop = 1;\n\t}\n\tconst links = () => {\n\t\tconst store = [];\n\t\tfor (let i = startLoop; i <= endLoop; i++) {\n\t\t\tstore.push(\n\t\t\t\t<li key={i} className={i == page ? 'active' : ''}>\n\t\t\t\t\t<Link to={`/dashboard/${i}`}>{i}</Link>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\t\treturn store;\n\t};\n\tconst next = () => {\n\t\tif (page < totalPages) {\n\t\t\treturn (\n\t\t\t\t<li>\n\t\t\t\t\t<Link to={`/dashboard/${parseInt(page) + 1}`}>\n\t\t\t\t\t\t<BsChevronRight />\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\t};\n\tconst prev = () => {\n\t\tif (page > 1) {\n\t\t\treturn (\n\t\t\t\t<li>\n\t\t\t\t\t<Link to={`/dashboard/${parseInt(page - 1)}`}>\n\t\t\t\t\t\t<BsChevronLeft />\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\t};\n\n\treturn totalPages && count > 3 ? (\n\t\t<div className='pagination'>\n\t\t\t{prev()}\n\t\t\t{links()}\n\t\t\t{next()}\n\t\t</div>\n\t) : (\n\t\t''\n\t);\n};\nexport default Pagination;\n","/home/anderson/blog/client/src/components/Edit.js",["135","136","137","138","139"],"import { useState, useEffect } from 'react';\nimport Helmet from 'react-helmet';\nimport { useParams, useHistory } from 'react-router-dom';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPost, updateAction } from '../store/asyncMethods/PostMethods';\nimport { POST_RESET, RESET_UPDATE, RESET_UPDATE_ERRORS } from '../store/tipos/PostTypes';\nimport toast, {Toaster} from 'react-hot-toast';\nimport Loader from './Loader'\n\nconst Edit = () => {\n    const {push} = useHistory();\n    const { Quill} = ReactQuill;\n    const { id } = useParams();\n\tconst [value, setValue] = useState('');\n\tconst [state, setState] = useState({\n\t\ttitle: '',\n\t\tdescription: '',\n\t});\n\tconst dispatch = useDispatch();\n\tconst { loading, redirect } = useSelector((state) => state.PostReducer);\n\tconst { post, postStatus } = useSelector((state) => state.FetchPost);\n    const {editErrors} = useSelector(state => state.UpdatePost);\n\tuseEffect(() => {\n\t\tif (postStatus) {\n\t\t\tsetState({\n\t\t\t\ttitle: post.title,\n\t\t\t\tdescription: post.description,\n\t\t\t});\n\t\t\tsetValue(post.body);\n\t\t\tdispatch({ type: POST_RESET });\n\t\t} else {\n\t\t\tdispatch(fetchPost(id));\n\t\t}\n\t}, [post]);\n    const updatePost = e => {\n        e.preventDefault()\n         dispatch(updateAction({\n            title: state.title,\n            body: value,\n            description: state.description,\n            id: post._id,\n        })) \n        \n    }\n    useEffect(() =>{\n        if(editErrors.length !== 0){\n            editErrors.map((error) => toast.error(error.msg))\n            dispatch({type:RESET_UPDATE_ERRORS})\n        } \n    }, [editErrors]);\n    useEffect(() =>{\n        if(redirect){\n            push('/dashboard')\n        }\n    }, [redirect])\n    return !loading ?  (\n        <div className='mt-100'>\n            <Helmet>\n                <title>Edit Post</title>\n                <meta name=\"descrição\" content=\"Edição do post\" />\n            </Helmet>\n            <Toaster \n                position='top-right' \n                reverseOrder={false}\n                toastOptions={{\n                style: {\n                fontSize: '14px',\n                },\n                }}\n            />\n            <div className='container'>\n                <div className='row'>\n                    <div className='col-6'>\n                        <div className='card'>\n                            <h3 className='card_h3'>Editar Post</h3>\n                            <form onSubmit={updatePost}>\n                                <div className='group'>\n                                    <label htmlFor='title'>Titulo do Post</label>\n                                    <input \n                                        type='text' \n                                        name='title' \n                                        id='title' \n                                        className='group_control' \n                                        placeholder='Titulo do Post' \n                                        value={state.title}\n                                        onChange={(e) => setState({...state, title: e.target.value})}\n                                    />\n                                </div>\n                                <div className='group'>\n                                    <label htmlFor='body'>Corpo da postagem</label>\n                                        <ReactQuill \n                                            theme='snow' \n                                            id='body'\n                                            placeholder='Corpo do Texto'\n                                            value={value} \n                                            onChange={setValue} \n                                        />\n                                </div>\n                                <div className='group'>\n                                    <label htmlFor='description'>Meta Descrição</label>\n                                        <textarea \n                                            name='description' \n                                            id='description' \n                                            cols='30' \n                                            rows='10' \n                                            defaultValue={state.description}\n                                            onChange={(e) => \n                                                setState({...state, description: e.target.value})}\n                                            onKeyUp={(e) => \n                                            setState({...state, description: e.target.value})}\n                                            className='group_control'\n                                            placeholder='Meta descirção...'\n                                            maxLength='150'>\n                                        </textarea>\n                                            <p className='length'>  \n                                            {state.description ? state.description.length : 0}</p> \n                                </div>\n                                <div className='group'>\n                                    <input type='submit' value='Editar' className='btn btn-default btn-block'/>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ) : ( <Loader />\n        );\n}\nexport default Edit;","/home/anderson/blog/client/src/components/Loader.js",[],"/home/anderson/blog/client/src/components/EditImge.js",["140","141","142"],"import Helmet from 'react-helmet';\nimport {useState, useEffect} from 'react'\nimport {useParams, useHistory} from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {updateImageAction} from '../store/asyncMethods/PostMethods'\nimport toast, {Toaster} from 'react-hot-toast';\nimport {RESET_UPDATE_IMAGE_ERRORS} from '../store/tipos/PostTypes'\n\n\nconst EditImage = () => {\n    const{id} = useParams();\n    const {push} = useHistory()\n    const dispatch = useDispatch()\n    const {updateImageErrors} = useSelector((state) => state.updateImage)\n    const {redirect} = useSelector((state) => state.PostReducer)\n    const [state, setState] = useState({\n        image: '',\n        imagePreview:'',\n        imageName: 'Escolha a imagem',\n    })\n    const fileHandle = (e) => {\n        if(e.target.files.length !== 0) {\n            const reader = new FileReader();\n            reader.onloadend = () => {\n                setState({...state, imagePreview: reader.result, image: e.target.files[0], imageName: e.target.files[0].name})\n            }\n            reader.readAsDataURL(e.target.files[0])\n        }\n    }\n        const updateImage = (e) => {\n            e.preventDefault();\n            const formData = new FormData()\n            formData.append('id', id)\n            formData.append('image', state.image)\n            dispatch(updateImageAction(formData))\n        }\n        useEffect(() => {\n            if(updateImageErrors.length !==0){\n                updateImageErrors.map((error) => toast.error(error.msg))\n                dispatch({type: RESET_UPDATE_IMAGE_ERRORS})\n            }\n        },[updateImageErrors])\n        useEffect(() => {\n            if(redirect){\n                push('/dashboard')\n            }\n        }, [redirect])\n        return(\n            <div className='container mt-100' >\n                <Helmet>\n                    <title>Editar imagem</title>\n                    <meta name=\"description\" content=\"Edição de imagem\" />\n                </Helmet>\n                <Toaster \n                    position='top-right' \n                    reverseOrder={false}\n                    toastOptions={{\n                    style: {\n                    fontSize: '14px',\n                    },\n                    }}\n                />  \n                <div className='row'>\n                    <div className='col-6'>\n                        <div className='card'>\n                            <h3 className='card__h3'>Editar imagem</h3>\n                            <form onSubmit={updateImage}>\n                                <div className='group'>\n                                    <label htmlFor='image' className='image_label'>\n                                        {state.imageName}\n                                    </label>\n                                    <input \n                                        type='file' \n                                        name='image'\n                                        id='image' \n                                        onChange={fileHandle}  />\n                                </div>\n                                <div className='group'>\n                                    <div className='imagePreview'>\n                                        {state.imagePreview ? <img src={state.imagePreview}/> : ''}\n                                    </div>\n                                    <div className='group'>\n                                    <input \n                                        type='submit' \n                                        value='Alterar Imagem'\n                                        className='btn btn-default btn-block' />\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    \n    }\nexport default EditImage;","/home/anderson/blog/client/src/components/UpdateName.js",["143","144","145","146"],"/home/anderson/blog/client/src/store/reducers/ProfileReducer.js",[],"/home/anderson/blog/client/src/store/asyncMethods/ProfileMethods.js",["147"],"/home/anderson/blog/client/src/store/tipos/ProfileTipos.js",[],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":56,"column":7,"nodeType":"154","endLine":56,"endColumn":16,"suggestions":"155"},{"ruleId":"152","severity":1,"message":"156","line":59,"column":8,"nodeType":"154","endLine":59,"endColumn":14,"suggestions":"157"},{"ruleId":"152","severity":1,"message":"158","line":84,"column":4,"nodeType":"154","endLine":84,"endColumn":28,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":178,"column":57,"nodeType":"162","endLine":178,"endColumn":83},{"ruleId":"163","severity":1,"message":"164","line":2,"column":81,"nodeType":"165","messageId":"166","endLine":2,"endColumn":95},{"ruleId":"163","severity":1,"message":"167","line":2,"column":110,"nodeType":"165","messageId":"166","endLine":2,"endColumn":125},{"ruleId":"163","severity":1,"message":"168","line":2,"column":162,"nodeType":"165","messageId":"166","endLine":2,"endColumn":173},{"ruleId":"163","severity":1,"message":"169","line":1,"column":172,"nodeType":"165","messageId":"166","endLine":1,"endColumn":184},{"ruleId":"170","severity":1,"message":"171","line":18,"column":30,"nodeType":"172","messageId":"173","endLine":18,"endColumn":32},{"ruleId":"163","severity":1,"message":"169","line":8,"column":22,"nodeType":"165","messageId":"166","endLine":8,"endColumn":34},{"ruleId":"163","severity":1,"message":"174","line":14,"column":13,"nodeType":"165","messageId":"166","endLine":14,"endColumn":18},{"ruleId":"152","severity":1,"message":"175","line":36,"column":5,"nodeType":"154","endLine":36,"endColumn":11,"suggestions":"176"},{"ruleId":"152","severity":1,"message":"177","line":52,"column":8,"nodeType":"154","endLine":52,"endColumn":20,"suggestions":"178"},{"ruleId":"152","severity":1,"message":"179","line":57,"column":8,"nodeType":"154","endLine":57,"endColumn":18,"suggestions":"180"},{"ruleId":"152","severity":1,"message":"177","line":42,"column":11,"nodeType":"154","endLine":42,"endColumn":30,"suggestions":"181"},{"ruleId":"152","severity":1,"message":"179","line":47,"column":12,"nodeType":"154","endLine":47,"endColumn":22,"suggestions":"182"},{"ruleId":"160","severity":1,"message":"161","line":80,"column":63,"nodeType":"162","endLine":80,"endColumn":94},{"ruleId":"163","severity":1,"message":"183","line":17,"column":12,"nodeType":"165","messageId":"166","endLine":17,"endColumn":19},{"ruleId":"152","severity":1,"message":"184","line":26,"column":8,"nodeType":"154","endLine":26,"endColumn":10,"suggestions":"185"},{"ruleId":"152","severity":1,"message":"177","line":32,"column":8,"nodeType":"154","endLine":32,"endColumn":22,"suggestions":"186"},{"ruleId":"152","severity":1,"message":"179","line":37,"column":4,"nodeType":"154","endLine":37,"endColumn":14,"suggestions":"187"},{"ruleId":"163","severity":1,"message":"188","line":3,"column":9,"nodeType":"165","messageId":"166","endLine":3,"endColumn":29},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'redirect'. Either include them or remove the dependency array.","ArrayExpression",["191"],"React Hook useEffect has missing dependencies: '_id' and 'dispatch'. Either include them or remove the dependency array.",["192"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["193"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'REDIRECT_FALSE' is defined but never used.","Identifier","unusedVar","'REMOVE_MENSSAGE' is defined but never used.","'EDIT_ERRORS' is defined but never used.","'RESET_UPDATE' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Quill' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'id', and 'postStatus'. Either include them or remove the dependency array.",["194"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["195"],"React Hook useEffect has a missing dependency: 'push'. Either include it or remove the dependency array.",["196"],["197"],["198"],"'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'nome'. Either include it or remove the dependency array.",["199"],["200"],["201"],"'RESET_PROFILE_ERRORS' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"212","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"212","fix":"221"},"Update the dependencies array to be: [dispatch, message, redirect]",{"range":"222","text":"223"},"Update the dependencies array to be: [_id, dispatch, page]",{"range":"224","text":"225"},"Update the dependencies array to be: [createErrors, props.history, redirect]",{"range":"226","text":"227"},"Update the dependencies array to be: [dispatch, id, post, postStatus]",{"range":"228","text":"229"},"Update the dependencies array to be: [dispatch, editErrors]",{"range":"230","text":"231"},"Update the dependencies array to be: [push, redirect]",{"range":"232","text":"233"},"Update the dependencies array to be: [dispatch, updateImageErrors]",{"range":"234","text":"235"},{"range":"236","text":"233"},"Update the dependencies array to be: [nome]",{"range":"237","text":"238"},"Update the dependencies array to be: [dispatch, updateErrors]",{"range":"239","text":"240"},{"range":"241","text":"233"},[1950,1959],"[dispatch, message, redirect]",[2030,2036],"[_id, dispatch, page]",[2584,2608],"[createErrors, props.history, redirect]",[1222,1228],"[dispatch, id, post, postStatus]",[1663,1675],"[dispatch, editErrors]",[1769,1779],"[push, redirect]",[1620,1639],"[dispatch, updateImageErrors]",[1753,1763],[951,953],"[nome]",[1147,1161],"[dispatch, updateErrors]",[1233,1243]]