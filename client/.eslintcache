[{"/home/anderson/blog/client/src/index.js":"1","/home/anderson/blog/client/src/App.js":"2","/home/anderson/blog/client/src/reportWebVitals.js":"3","/home/anderson/blog/client/src/components/Home.js":"4","/home/anderson/blog/client/src/components/auth/Registro.js":"5","/home/anderson/blog/client/src/components/auth/Login.js":"6","/home/anderson/blog/client/src/components/Navbar.js":"7","/home/anderson/blog/client/src/components/auth/BgImage.js":"8","/home/anderson/blog/client/src/store/index.js":"9","/home/anderson/blog/client/src/store/reducers/AuthReducer.js":"10","/home/anderson/blog/client/src/store/asyncMethods/AuthMethods.js":"11","/home/anderson/blog/client/src/components/Dashboard.js":"12","/home/anderson/blog/client/src/store/tipos/userTypes.js":"13","/home/anderson/blog/client/src/privado/PrivateRoute.js":"14","/home/anderson/blog/client/src/privado/RouteLinks.js":"15","/home/anderson/blog/client/src/components/NotFound.js":"16","/home/anderson/blog/client/src/components/Create.js":"17","/home/anderson/blog/client/src/store/asyncMethods/PostMethods.js":"18","/home/anderson/blog/client/src/store/tipos/PostTypes.js":"19","/home/anderson/blog/client/src/store/reducers/PostReducer.js":"20","/home/anderson/blog/client/src/components/SideBar.js":"21","/home/anderson/blog/client/src/components/Pagination.js":"22","/home/anderson/blog/client/src/components/Edit.js":"23","/home/anderson/blog/client/src/components/Loader.js":"24","/home/anderson/blog/client/src/components/EditImge.js":"25"},{"size":268,"mtime":1612189570210,"results":"26","hashOfConfig":"27"},{"size":1306,"mtime":1618603846446,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1612187771852,"results":"29","hashOfConfig":"27"},{"size":285,"mtime":1612479975633,"results":"30","hashOfConfig":"27"},{"size":3090,"mtime":1612880356501,"results":"31","hashOfConfig":"27"},{"size":2806,"mtime":1612915702229,"results":"32","hashOfConfig":"27"},{"size":1531,"mtime":1618405217176,"results":"33","hashOfConfig":"27"},{"size":105,"mtime":1612402314038,"results":"34","hashOfConfig":"27"},{"size":587,"mtime":1618575994428,"results":"35","hashOfConfig":"27"},{"size":1478,"mtime":1618510170456,"results":"36","hashOfConfig":"27"},{"size":1488,"mtime":1618422820336,"results":"37","hashOfConfig":"27"},{"size":3041,"mtime":1618603987838,"results":"38","hashOfConfig":"27"},{"size":248,"mtime":1612914040333,"results":"39","hashOfConfig":"27"},{"size":370,"mtime":1612880169104,"results":"40","hashOfConfig":"27"},{"size":379,"mtime":1612880285461,"results":"41","hashOfConfig":"27"},{"size":536,"mtime":1612882248016,"results":"42","hashOfConfig":"27"},{"size":8324,"mtime":1618425148088,"results":"43","hashOfConfig":"27"},{"size":2677,"mtime":1618577995964,"results":"44","hashOfConfig":"27"},{"size":719,"mtime":1618575361668,"results":"45","hashOfConfig":"27"},{"size":2170,"mtime":1618576729856,"results":"46","hashOfConfig":"27"},{"size":488,"mtime":1614035613438,"results":"47","hashOfConfig":"27"},{"size":1130,"mtime":1618493433024,"results":"48","hashOfConfig":"27"},{"size":5540,"mtime":1618602588446,"results":"49","hashOfConfig":"27"},{"size":197,"mtime":1618598709056,"results":"50","hashOfConfig":"27"},{"size":2373,"mtime":1618605768694,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1m3xjqq",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/anderson/blog/client/src/index.js",[],["108","109"],"/home/anderson/blog/client/src/App.js",[],"/home/anderson/blog/client/src/reportWebVitals.js",[],"/home/anderson/blog/client/src/components/Home.js",[],"/home/anderson/blog/client/src/components/auth/Registro.js",[],"/home/anderson/blog/client/src/components/auth/Login.js",[],"/home/anderson/blog/client/src/components/Navbar.js",[],"/home/anderson/blog/client/src/components/auth/BgImage.js",[],"/home/anderson/blog/client/src/store/index.js",[],"/home/anderson/blog/client/src/store/reducers/AuthReducer.js",[],"/home/anderson/blog/client/src/store/asyncMethods/AuthMethods.js",[],"/home/anderson/blog/client/src/components/Dashboard.js",["110"],"/home/anderson/blog/client/src/store/tipos/userTypes.js",[],"/home/anderson/blog/client/src/privado/PrivateRoute.js",[],"/home/anderson/blog/client/src/privado/RouteLinks.js",[],"/home/anderson/blog/client/src/components/NotFound.js",[],"/home/anderson/blog/client/src/components/Create.js",["111","112"],"import {Helmet} from 'react-helmet';\nimport {useState, useEffect} from 'react';\nimport ReactQuill from 'react-quill'\nimport 'react-quill/dist/quill.snow.css'\nimport {createAction} from '../store/asyncMethods/PostMethods';\nimport {useDispatch, useSelector} from 'react-redux'\nimport toast, {Toaster} from 'react-hot-toast';\n\n\nconst Create = (props) =>{\n    const { createErrors, redirect } = useSelector((state) => state.PostReducer)\n    const [currentImage, setCurentImage] = useState('Escolher Imagem')\n    const [imagePreview, setImagePreview]=useState('');\n    const dispatch = useDispatch();\n    const {user:{_id, nome}} = useSelector((state) => state.AuthReducer)\n    const fileHandle = e => {\n        if(e.target.files.length!==0){\n        setCurentImage(e.target.files[0].name)\n        setState({\n            ...state,\n            [e.target.name]: e.target.files[0]\n        })\n        const reader = new FileReader();\n        reader.onloadend =() => {\n            setImagePreview(reader.result);\n        }\n        reader.readAsDataURL(e.target.files[0]);\n        }\n    };\n\n    const [state, setState] = useState({\n        title: '',\n        description: '',\n        image: ''\n    });\n    const handleDescription = (e) =>{\n        setState({\n            ...state,\n            [e.target.name]: e.target.value,\n        })\n\n    }\n    const [slug, setSlug] = useState('');\n    const [slugButton, setSlugButton] = useState(false)\n    const slugHandle = (e)  => {\n        setSlugButton(true);\n        setSlug(e.target.value)\n    \n    }\n    const handleURL = e => {\n        setSlug(slug.trim().slipt(' ').join('-'));\n        e.preventDefault();\n    }\n    const handleInput = e => {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value,\n    })\n    const createSlug = e.target.value.trim().split(' ').join('-');\n    setSlug(createSlug);\n}\n    const [value, setValue] = useState('');\n   const createPost = (e) =>{\n       e.preventDefault();\n       const {title, description, image} = state;\n       const formData = new FormData();\n       formData.append('title', title);\n       formData.append('body', value);\n       formData.append('image', image)\n       formData.append('description', description)\n       formData.append('slug', slug)\n       formData.append('name', nome)\n       formData.append('id', _id)\n       dispatch(createAction(formData))\n       \n   };\n   useEffect(() => {\n    if(redirect){\n        props.history.push('./dashboard');\n    }   \n    if (createErrors.length !== 0) {\n        createErrors.map((err) => toast.error(err.msg));\n    }\n}, [createErrors, redirect]);\n    \n    return (\n        <div className='create mt-100'>\n            <Helmet>\n                <title>Criando novo post</title>\n                <meta name=\"descrição\" content=\"Criação de post\" />\n            </Helmet>\n            <Toaster \n                position='top-right' \n                reverseOrder={false}\n                toastOptions={{\n                style: {\n                fontSize: '14px',\n                },\n                }}\n            />\n                <div className='container'>\n                <form onSubmit={createPost}>\n                    <div className='row ml-minus-15 mr-minus-15'>\n                        <div className='col-6 p-15'>\n                            <div className='card'>\n                                <h3 className='card_h3'>Criando novo Post</h3>\n                                \n                                    <div className='group'>\n                                        <label htmlFor='title'>Titulo do Post</label>\n                                        <input type='text'\n                                            name='title' \n                                            id='title'\n                                            value={state.name}\n                                            onChange={handleInput}\n                                            className='group_control' \n                                            placeholder='Titulo do post...' />\n                                    </div>\n                                    <div className='group'>\n                                        <label htmlFor='image'\n                                            className='image_label'\n                                            >{currentImage}\n                                        </label>\n                                        <input \n                                            type='file' \n                                            name='image'\n                                            id='image' \n                                            onChange={fileHandle}  />\n                                    </div>\n                                    <div className='group'>\n                                        <label htmlFor='body'>Corpo do Texto</label>\n                                        <ReactQuill \n                                            theme='snow' \n                                            id='body'\n                                            placeholder='Corpo do Texto'\n                                            value={value} \n                                            onChange={setValue} />\n                                    </div>\n                                    <div className='group'>\n                                        <label htmlFor='description'>Meta Descrição</label>\n                                        <textarea \n                                            name='description' \n                                            id='description' \n                                            cols='30' \n                                            rows='10' \n                                            defaultValue={state.description}\n                                            onChange={handleDescription}\n                                            className='group_control'\n                                            placeholder='Meta descirção...'\n                                            maxLength='150'>\n                                        </textarea>\n                                    <p className='length'>  {state.description ? state.description.length : 0}</p> \n                                    </div>\n                                </div>\n                        </div>\n                        <div className='col-6 p-15'>\n                            <div className='card'>\n                                <div className='group'>\n                                    <label htmlFor='slug'>Post URL</label>\n                                    <input \n                                        type='text' \n                                        name='slug' \n                                        id='slug' \n                                        value={slug}\n                                        onChange={slugHandle}\n                                        className='group_control' \n                                        placeholder='Post URL...' \n                                    />\n                                </div>\n                                <div className='group' >\n                                    {slugButton ? (\n                                    <button class='btn btn-default' onClick={handleURL}>Update Slug</button> \n                                    ) : ( \n                                        ''\n                                    )}\n                                </div>\n                                <div className='group'>\n                                    <div className='imagePreview'>\n                                        {imagePreview ? <img src={imagePreview} /> : ''}\n                                    </div>\n                                </div>\n                                <div className='group'>\n                                        <input \n                                            type='submit' \n                                            value='Criando Post'\n                                            className='btn btn-default btn-block' />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\nexport default Create;","/home/anderson/blog/client/src/store/asyncMethods/PostMethods.js",["113","114","115"],"import axios from 'axios';\nimport { CREATE_ERRORS, REMOVE_ERRORS, SET_LOADER, CLOSE_LOADER, REDIRECT_TRUE, REDIRECT_FALSE, SET_MESSAGE, REMOVE_MENSSAGE, SET_POSTS, SET_POST, POST_REQUEST, EDIT_ERRORS, SET_UPDATE_ERRORS } from '../tipos/PostTypes';\n\nexport const createAction = (postData) => {\n\treturn async (dispatch, getState) => {\n\t\tconst {\n\t\t\tAuthReducer: { token },\n\t\t} = getState();\n\t\tdispatch({ type: SET_LOADER });\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst {\n\t\t\t\tdata: { msg },\n\t\t\t} = await axios.post('/create_post', postData, config);\n\t\t\tdispatch({ type: CLOSE_LOADER });\n\t\t\tdispatch({ type: REMOVE_ERRORS });\n\t\t\tdispatch({ type: REDIRECT_TRUE });\n\t\t\tdispatch({ type: SET_MESSAGE, payload: msg });\n\t\t} catch (error) {\n\t\t\tconsole.log(error.response);\n\t\t\tconst { errors } = error.response.data;\n\t\t\tdispatch({ type: CLOSE_LOADER });\n\t\t\tdispatch({ type: CREATE_ERRORS, payload: errors });\n\t\t}\n\t};\n};\n\nexport const fetchPosts = (id, page) => {\n\treturn async (dispatch, getState) => {\n\t\tconst {AuthReducer:{token}} = getState();\n\t\tdispatch({type: SET_LOADER})\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst {\n\t\t\t\tdata: {response, count, perPage},\n\t\t\t} = await axios.get(`/posts/${id}/${page}`, config)\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tdispatch({type: SET_POSTS, payload: {response, count, perPage}})\n\t\t} catch (error) {\n\t\t\tdispatch({type: CLOSE_LOADER});\n\t\t}\n\t}\n}\nexport const fetchPost = (id) => {\n\treturn async (dispatch, getState) => {\n\t\tconst {\n\t\t\tAuthReducer: { token },\n\t\t} = getState();\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t};\n\t\tdispatch({type: SET_LOADER})\n\t\ttry {\n\t\t\tconst {\n\t\t\t\tdata: {post},\n\t\t} = await axios.get(`/post/${id}`, config)\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tdispatch({type: SET_POST, payload: post})\n\t\t\tdispatch({type: POST_REQUEST});\n\t\t} catch (error) {\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tconsole.log(error.message)\n\n\t\t}\n\t}\n};\nexport const updateAction = (editData) => {\n\treturn async(dispatch, getState) => {\n\t\tconst {\n\t\t\tAuthReducer: { token },\n\t\t} = getState();\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t};\n\t\tdispatch({type: SET_LOADER})\n\t\ttry {\n\t\t\tconst {data} = await axios.post('/update', editData, config)\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tdispatch({type: REDIRECT_TRUE})\n\t\t\tdispatch({type: SET_MESSAGE, payload: data.msg})\n\t\t} catch (error) {\n\t\t\tconst {response: {\n\t\t\t\tdata: {errors},\n\t\t\t},\n\t\t}= error;\n\t\t\tdispatch({type: CLOSE_LOADER})\n\t\t\tdispatch({type: SET_UPDATE_ERRORS, payload: errors})\n\t\t\tconsole.log(error.response)\n\t\t}\n\t}\n}","/home/anderson/blog/client/src/store/tipos/PostTypes.js",[],"/home/anderson/blog/client/src/store/reducers/PostReducer.js",["116"],"import {SET_LOADER, CLOSE_LOADER, CREATE_ERRORS, REDIRECT_TRUE, REDIRECT_FALSE, SET_MESSAGE, REMOVE_MESSAGE, REMOVE_ERRORS, SET_POSTS, SET_POST, POST_REQUEST, POST_RESET, RESET_UPDATE, SET_UPDATE_ERRORS, RESET_UPDATE_ERRORS} from '../tipos/PostTypes';\nconst initState = {\n    loading: false,\n    createErrors: [],\n    redirect: false,\n    message: '',\n    posts: [],\n    perPage: 0,\n    count: 0,\n    post:{},\n    postStatus: false,\n    editErrors: [],\n}\n\nexport const PostReducer = (state = initState, action) => {\n    const {type, payload} = action;\n    if(type === SET_LOADER){\n        return {...state, loading: true}\n    }else if(type === CLOSE_LOADER){\n        return {...state, loading: false}\n    }else if(type === CREATE_ERRORS){\n        return {...state, createErrors: payload }\n    }else if(type ===REDIRECT_TRUE) {\n        return {...state, redirect: true}\n    }else if(type === REDIRECT_FALSE){\n        return{...state, redirect: false}    \n    }else if(type === SET_MESSAGE){\n        return{ ...state, message: action.payload}\n    }else if(type === REMOVE_MESSAGE){\n        return{...state , message: ''}\n    }else if(type === REMOVE_ERRORS){\n        return{ ...state, createErrors: [] };\n    }else{\n    return state;\n}\n};\n\nexport const FetchPosts = (state = initState, action) => {\n    const {type, payload} = action;\n    if(type === SET_POSTS){\n        return{...state, posts: payload.response, count: payload.count, perPage: payload.perPage};\n    }else{\n        return state\n    }\n}\nexport const FetchPost = (state = initState, action) => {\n    const {type, payload} = action;\n    if(type === SET_POST){\n        return {...state, post: payload };\n    }else if(type === POST_REQUEST) {\n        return {...state, postStatus: true }\n    }else if(type === POST_RESET){\n        return{...state, postStatus: false}\n    }else{\n        return state;\n    }\n};\nexport const UpdatePost = (state = initState, action) => {\n    const {type, payload} = action;\n    if(type === SET_UPDATE_ERRORS){\n        return{...state, editErrors: payload}\n    }else if(type === RESET_UPDATE_ERRORS){\n        return{...state, editErrors: []}\n    }else{\n        return state;\n    }\n}","/home/anderson/blog/client/src/components/SideBar.js",[],"/home/anderson/blog/client/src/components/Pagination.js",["117"],"import { Link } from 'react-router-dom';\nimport { BsChevronRight, BsChevronLeft } from 'react-icons/bs';\nconst Pagination = ({ count, page, perPage }) => {\n\tlet totalPages = Math.ceil(count / perPage);\n\tlet startLoop = page;\n\tlet diff = totalPages - page;\n\tif (diff <= 3) {\n\t\tstartLoop = totalPages - 3;\n\t}\n\tlet endLoop = startLoop + 3;\n\tif (startLoop <= 0) {\n\t\tstartLoop = 1;\n\t}\n\tconst links = () => {\n\t\tconst store = [];\n\t\tfor (let i = startLoop; i <= endLoop; i++) {\n\t\t\tstore.push(\n\t\t\t\t<li key={i} className={i == page ? 'active' : ''}>\n\t\t\t\t\t<Link to={`/dashboard/${i}`}>{i}</Link>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\t\treturn store;\n\t};\n\tconst next = () => {\n\t\tif (page < totalPages) {\n\t\t\treturn (\n\t\t\t\t<li>\n\t\t\t\t\t<Link to={`/dashboard/${parseInt(page) + 1}`}>\n\t\t\t\t\t\t<BsChevronRight />\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\t};\n\tconst prev = () => {\n\t\tif (page > 1) {\n\t\t\treturn (\n\t\t\t\t<li>\n\t\t\t\t\t<Link to={`/dashboard/${parseInt(page - 1)}`}>\n\t\t\t\t\t\t<BsChevronLeft />\n\t\t\t\t\t</Link>\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\t};\n\n\treturn totalPages ? (\n\t\t<div className='pagination'>\n\t\t\t{prev()}\n\t\t\t{links()}\n\t\t\t{next()}\n\t\t</div>\n\t) : (\n\t\t''\n\t);\n};\nexport default Pagination;\n","/home/anderson/blog/client/src/components/Edit.js",["118","119","120","121","122"],"import { useState, useEffect } from 'react';\nimport Helmet from 'react-helmet';\nimport { useParams, useHistory } from 'react-router-dom';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPost, updateAction } from '../store/asyncMethods/PostMethods';\nimport { POST_RESET, RESET_UPDATE, RESET_UPDATE_ERRORS } from '../store/tipos/PostTypes';\nimport toast, {Toaster} from 'react-hot-toast';\nimport Loader from './Loader'\n\nconst Edit = () => {\n    const {push} = useHistory();\n    const { Quill} = ReactQuill;\n    const { id } = useParams();\n\tconst [value, setValue] = useState('');\n\tconst [state, setState] = useState({\n\t\ttitle: '',\n\t\tdescription: '',\n\t});\n\tconst dispatch = useDispatch();\n\tconst { loading, redirect } = useSelector((state) => state.PostReducer);\n\tconst { post, postStatus } = useSelector((state) => state.FetchPost);\n    const {editErrors} = useSelector(state => state.UpdatePost);\n\tuseEffect(() => {\n\t\tif (postStatus) {\n\t\t\tsetState({\n\t\t\t\ttitle: post.title,\n\t\t\t\tdescription: post.description,\n\t\t\t});\n\t\t\tsetValue(post.body);\n\t\t\tdispatch({ type: POST_RESET });\n\t\t} else {\n\t\t\tdispatch(fetchPost(id));\n\t\t}\n\t}, [post]);\n    const updatePost = e => {\n        e.preventDefault()\n         dispatch(updateAction({\n            title: state.title,\n            body: value,\n            description: state.description,\n            id: post._id,\n        })) \n        \n    }\n    useEffect(() =>{\n        if(editErrors.length !== 0){\n            editErrors.map((error) => toast.error(error.msg))\n            dispatch({type:RESET_UPDATE_ERRORS})\n        } \n    }, [editErrors]);\n    useEffect(() =>{\n        if(redirect){\n            push('/dashboard')\n        }\n    }, [redirect])\n    return !loading ?  (\n        <div className='mt-100'>\n            <Helmet>\n                <title>Edit Post</title>\n                <meta name=\"descrição\" content=\"Edição do post\" />\n            </Helmet>\n            <Toaster \n                position='top-right' \n                reverseOrder={false}\n                toastOptions={{\n                style: {\n                fontSize: '14px',\n                },\n                }}\n            />\n            <div className='container'>\n                <div className='row'>\n                    <div className='col-6'>\n                        <div className='card'>\n                            <h3 className='card_h3'>Editar Post</h3>\n                            <form onSubmit={updatePost}>\n                                <div className='group'>\n                                    <label htmlFor='title'>Titulo do Post</label>\n                                    <input \n                                        type='text' \n                                        name='title' \n                                        id='title' \n                                        className='group_control' \n                                        placeholder='Titulo do Post' \n                                        value={state.title}\n                                        onChange={(e) => setState({...state, title: e.target.value})}\n                                    />\n                                </div>\n                                <div className='group'>\n                                    <label htmlFor='body'>Corpo da postagem</label>\n                                        <ReactQuill \n                                            theme='snow' \n                                            id='body'\n                                            placeholder='Corpo do Texto'\n                                            value={value} \n                                            onChange={setValue} \n                                        />\n                                </div>\n                                <div className='group'>\n                                    <label htmlFor='description'>Meta Descrição</label>\n                                        <textarea \n                                            name='description' \n                                            id='description' \n                                            cols='30' \n                                            rows='10' \n                                            defaultValue={state.description}\n                                            onChange={(e) => \n                                                setState({...state, description: e.target.value})}\n                                            onKeyUp={(e) => \n                                            setState({...state, description: e.target.value})}\n                                            className='group_control'\n                                            placeholder='Meta descirção...'\n                                            maxLength='150'>\n                                        </textarea>\n                                            <p className='length'>  \n                                            {state.description ? state.description.length : 0}</p> \n                                </div>\n                                <div className='group'>\n                                    <input type='submit' value='Editar' className='btn btn-default btn-block'/>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ) : ( <Loader />\n        );\n}\nexport default Edit;","/home/anderson/blog/client/src/components/Loader.js",[],"/home/anderson/blog/client/src/components/EditImge.js",["123","124"],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":31,"column":7,"nodeType":"131","endLine":31,"endColumn":13,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":84,"column":4,"nodeType":"131","endLine":84,"endColumn":28,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":178,"column":57,"nodeType":"137","endLine":178,"endColumn":83},{"ruleId":"138","severity":1,"message":"139","line":2,"column":81,"nodeType":"140","messageId":"141","endLine":2,"endColumn":95},{"ruleId":"138","severity":1,"message":"142","line":2,"column":110,"nodeType":"140","messageId":"141","endLine":2,"endColumn":125},{"ruleId":"138","severity":1,"message":"143","line":2,"column":162,"nodeType":"140","messageId":"141","endLine":2,"endColumn":173},{"ruleId":"138","severity":1,"message":"144","line":1,"column":172,"nodeType":"140","messageId":"141","endLine":1,"endColumn":184},{"ruleId":"145","severity":1,"message":"146","line":18,"column":30,"nodeType":"147","messageId":"148","endLine":18,"endColumn":32},{"ruleId":"138","severity":1,"message":"144","line":8,"column":22,"nodeType":"140","messageId":"141","endLine":8,"endColumn":34},{"ruleId":"138","severity":1,"message":"149","line":14,"column":13,"nodeType":"140","messageId":"141","endLine":14,"endColumn":18},{"ruleId":"129","severity":1,"message":"150","line":36,"column":5,"nodeType":"131","endLine":36,"endColumn":11,"suggestions":"151"},{"ruleId":"129","severity":1,"message":"152","line":52,"column":8,"nodeType":"131","endLine":52,"endColumn":20,"suggestions":"153"},{"ruleId":"129","severity":1,"message":"154","line":57,"column":8,"nodeType":"131","endLine":57,"endColumn":18,"suggestions":"155"},{"ruleId":"138","severity":1,"message":"156","line":5,"column":11,"nodeType":"140","messageId":"141","endLine":5,"endColumn":13},{"ruleId":"135","severity":1,"message":"136","line":44,"column":59,"nodeType":"137","endLine":44,"endColumn":90},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: '_id', 'dispatch', 'menssage', and 'redirect'. Either include them or remove the dependency array.","ArrayExpression",["159"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["160"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'REDIRECT_FALSE' is defined but never used.","Identifier","unusedVar","'REMOVE_MENSSAGE' is defined but never used.","'EDIT_ERRORS' is defined but never used.","'RESET_UPDATE' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Quill' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'id', and 'postStatus'. Either include them or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["162"],"React Hook useEffect has a missing dependency: 'push'. Either include it or remove the dependency array.",["163"],"'id' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [_id, dispatch, menssage, page, redirect]",{"range":"174","text":"175"},"Update the dependencies array to be: [createErrors, props.history, redirect]",{"range":"176","text":"177"},"Update the dependencies array to be: [dispatch, id, post, postStatus]",{"range":"178","text":"179"},"Update the dependencies array to be: [dispatch, editErrors]",{"range":"180","text":"181"},"Update the dependencies array to be: [push, redirect]",{"range":"182","text":"183"},[1164,1170],"[_id, dispatch, menssage, page, redirect]",[2584,2608],"[createErrors, props.history, redirect]",[1222,1228],"[dispatch, id, post, postStatus]",[1663,1675],"[dispatch, editErrors]",[1769,1779],"[push, redirect]"]